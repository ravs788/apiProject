### Health Check
# curl -i https://restful-booker.herokuapp.com/ping
GET {{host}}/ping

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Expected Response status; 201, Actual Response Status: "+response.status);
    });
%}

#### Get auth token
#GET https://examples.http-client.intellij.net/get
#    ?generated-in=Aqua
#
####
# curl -X POST
#  https://restful-booker.herokuapp.com/auth
#  -H 'Content-Type: application/json'
#  -d '{
#    "username" : "admin",
#    "password" : "password123"
#}'
POST {{host}}/auth
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "{{password}}"
}
> {%
    client.global.set("auth_token", response.body.token);
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
    });
%}

### Get all bookings
# curl -i https://restful-booker.herokuapp.com/booking
GET {{host}}/booking

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
    });
%}

### Create a Booking
# curl -X POST
#  https://restful-booker.herokuapp.com/booking
#  -H 'Content-Type: application/json'
#  -d '{
#    "firstname" : "Jim",
#    "lastname" : "Brown",
#    "totalprice" : 111,
#    "depositpaid" : true,
#    "bookingdates" : {
#        "checkin" : "2018-01-01",
#        "checkout" : "2019-01-01"
#    },
#    "additionalneeds" : "Breakfast"
#}'
POST {{host}}/booking
Content-Type: application/json

{
  "firstname": "Jim",
  "lastname": "Brown",
  "totalprice": 111,
  "depositpaid": true,
  "bookingdates": {
    "checkin": "2018-01-01",
    "checkout": "2019-01-01"
  },
  "additionalneeds": "Breakfast"
}
> {%
    client.global.set("booking_id", response.body.bookingid);
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
        client.assert(response.body.booking.firstname === "Jim", "Expected firstname : Jim, Actual firstname : "+response.body.booking.firstname);
    });
%}

### Get booking by id
GET {{host}}/booking/{{booking_id}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
    });
%}

### Update an existing booking

PUT {{host}}/booking/{{booking_id}}
Accept: application/json
Cookie: token={{auth_token}}
Content-Type: application/json

{
  "firstname": "James",
  "lastname": "Brown",
  "totalprice": 111,
  "depositpaid": true,
  "bookingdates": {
    "checkin": "2018-01-01",
    "checkout": "2019-01-01"
  },
  "additionalneeds": "Breakfast"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
    });
%}

### Partial Update Booking

# curl -X PATCH
#  https://restful-booker.herokuapp.com/booking/1
#  -H 'Content-Type: application/json'
#  -H 'Accept: application/json'
#  -H 'Cookie: token=abc123'
#  -d '{
#    "firstname" : "James",
#    "lastname" : "Brown"
#}'
PATCH {{host}}/booking/{{booking_id}}
Accept: application/json
Cookie: token={{auth_token}}
Content-Type: application/json

{
  "firstname": "James",
  "lastname": "Bond"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
    });
%}

### Delete booking
# curl -X DELETE
#  https://restful-booker.herokuapp.com/booking/1
#  -H 'Content-Type: application/json'
#  -H 'Cookie: token=abc123'
DELETE {{host}}/booking/{{booking_id}}
Cookie: token={{auth_token}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Expected Response status; 200, Actual Response Status: "+response.status);
    });
%}

### Get booking by id
GET {{host}}/booking/{{booking_id}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 404, "Expected Response status; 404, Actual Response Status: "+response.status);
    });
%}
